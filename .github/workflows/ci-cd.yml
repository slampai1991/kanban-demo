name: Kanban Demo CI/CD

on:
  push:
    branches: [main, task8]

jobs:
  build:
    name: Build application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Build backend with Maven
        run: mvn -B package -f kanban-backend/pom.xml

      - name: Set up Node.js 12
        uses: actions/setup-node@v4
        with:
          node-version: '12'

      - name: Build frontend
        run: |
          cd kanban-frontend
          npm install --legacy-peer-deps
          npm run build -- --prod

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:12
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U user -d kanban"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=12
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Java 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Run backend unit tests
        run: mvn -B test -f kanban-backend/pom.xml
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ secrets.POSTGRES_DB }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

      - name: Run backend unit tests
        run: mvn -B test -f kanban-backend/pom.xml

  lint:
    name: Lint code
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js 12
        uses: actions/setup-node@v4
        with:
          node-version: '12'
      - name: Install dependencies
        run: cd kanban-frontend && npm install --legacy-peer-deps
      - name: Lint frontend
        run: cd kanban-frontend && npm run lint -- --force

  docker-build:
    needs:
      - build
      - test
      - lint
    name: Build Docker images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build backend image
        run: docker build -t kanban-backend:latest ./kanban-backend
      - name: Build frontend image
        run: docker build -t kanban-frontend:latest ./kanban-frontend
      - name: Build nginx image
        run: docker build -t kanban-nginx:latest -f ./kanban-frontend/Dockerfile ./kanban-frontend

  compose-up:
    name: Docker Compose up
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create .env file
        run: |
          echo "POSTGRES_DB= ${{ secrets.POSTGRES_DB }}" > .env
          echo "POSTGRES_USER= ${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD= ${{ secrets.POSTGRES_PASSWORD }}" >> .env
      - name: Start all services
        run: docker compose up -d --build
      - name: Stop all services
        run: docker compose down

  deploy:
    name: Deploy to server
    needs:
      - compose-up
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Copy project files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: "."
          target: "/home/${{ secrets.DEPLOY_USER }}/kanban-app"
          port: 22
      - name: Run docker compose on remote server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: 22
          script: |
            cd /home/${{ secrets.DEPLOY_USER }}/kanban-app
            docker compose pull || true
            docker compose up -d --build --remove-orphans

  collect-logs:
    name: Collect workflow logs
    needs: [build, test, lint, docker-build, compose-up, deploy]
    if: always()  # Всегда выполняется, даже при ошибках
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Archive logs
        run: |
          mkdir logs
          # Копируем логи docker
          docker ps -a > logs/containers.txt
          docker images > logs/images.txt
          
          # Собираем логи из этапов
          echo "### BUILD LOGS ###" > logs/workflow.log
          cat build.log >> logs/workflow.log
          echo "### TEST LOGS ###" >> logs/workflow.log
          cat test.log >> logs/workflow.log
          echo "### LINT LOGS ###" > logs/workflow.log
          cat lint.log >> logs/workflow.log
          echo "### DOCKER-BUILD LOGS ###" > logs/workflow.log
          cat docker-build.log >> logs/workflow.log
          echo "### COMPOSE-UP LOGS ###" > logs/workflow.log
          cat compose-up.log >> logs/workflow.log
          echo "### DEPLOY LOGS ###" > logs/workflow.log
          cat deploy.log >> logs/workflow.log
      
      - name: Upload all logs
        uses: actions/upload-artifact@v4
        with:
          name: workflow-logs
          path: logs/
          retention-days: 7

  cleanup:
    name: Cleanup resources
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Stop all services
        run: docker compose down

