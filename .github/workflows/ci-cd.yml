name: Kanban Demo CI/CD

on:
  push:
    branches: [main, task8]

jobs:
  build:
    name: Build application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Build backend with Maven
        run: mvn -B package -f kanban-backend/pom.xml

      - name: Set up Node.js 12
        uses: actions/setup-node@v4
        with:
          node-version: '12'

      - name: Build frontend
        run: |
          cd kanban-frontend
          npm install --legacy-peer-deps
          npm run build -- --prod

  test:
    name: Run tests
    runs-on: ubuntu-latest
    # needs: build

    services:
      postgres:
        image: postgres:12
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd="pg_isready -U user -d kanban"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=12
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Java 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'

      - name: Run backend unit tests
        run: mvn -B test -f kanban-backend/pom.xml
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ secrets.POSTGRES_DB }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

      - name: Run backend unit tests
        run: mvn -B test -f kanban-backend/pom.xml
        
      # - name: Run backend integration tests
      #   run: mvn -B verify -f kanban-backend/pom.xml

      - name: Set up Node.js 12
        uses: actions/setup-node@v4
        with:
          node-version: '12'
          
      - name: Run frontend unit tests
        run: |
          cd kanban-frontend
          npm install --legacy-peer-deps
          npm run test -- --watch=false --browsers=ChromeHeadless

      # Установка Chrome для e2e тестов
      - name: Install Chrome for e2e tests
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser

      # e2e тесты
      - name: Run frontend e2e tests
        run: |
          cd kanban-frontend
          npm run e2e -- --webdriver-update=false --protractor-config=protractor-ci.conf.js
          
      - name: Upload test reports
        if: failure()  # выгрузить только если тесты упали
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: kanban-backend/target/failsafe-reports

  # # Опционально: шаг деплоя
  # deploy:
  #   name: Deploy application
  #   runs-on: ubuntu-latest
  #   needs: [build, test]  # Зависит от успеха build и test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     # Здесь будут шаги деплоя
  #     - name: Deploy to production
  #       run: echo "Deployment logic would go here"

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js 12
        uses: actions/setup-node@v4
        with:
          node-version: '12'
      - name: Install dependencies
        run: cd kanban-frontend && npm install --legacy-peer-deps
      - name: Lint frontend
        run: cd kanban-frontend && npm run lint -- --force

  # docker-build:
  #   name: Build Docker images
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build backend image
  #       run: docker build -t kanban-backend:latest ./kanban-backend
  #     - name: Build frontend image
  #       run: docker build -t kanban-frontend:latest ./kanban-frontend
  #     - name: Build nginx image
  #       run: docker build -t kanban-nginx:latest -f ./kanban-frontend/Dockerfile ./kanban-frontend

  # compose-up:
  #   name: Docker Compose up
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Create .env file
  #       run: |
  #         echo "POSTGRES_DB=kanban" > .env
  #         echo "POSTGRES_USER=user" >> .env
  #         echo "POSTGRES_PASSWORD=password" >> .env
  #     - name: Start all services
  #       run: docker compose up -d --build
  #     - name: Stop all services
  #       run: docker compose down

  # deploy:
  #   name: Deploy to server
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Copy project files to server
  #       uses: appleboy/scp-action@v0.1.7
  #       with:
  #         host: ${{ secrets.DEPLOY_HOST }}
  #         username: ${{ secrets.DEPLOY_USER }}
  #         key: ${{ secrets.DEPLOY_SSH_KEY }}
  #         source: "."
  #         target: "/home/${{ secrets.DEPLOY_USER }}/kanban-app"
  #         port: 22
  #     - name: Run docker compose on remote server
  #       uses: appleboy/ssh-action@v0.1.7
  #       with:
  #         host: ${{ secrets.DEPLOY_HOST }}
  #         username: ${{ secrets.DEPLOY_USER }}
  #         key: ${{ secrets.DEPLOY_SSH_KEY }}
  #         port: 22
  #         script: |
  #           cd /home/${{ secrets.DEPLOY_USER }}/kanban-app
  #           docker compose pull || true
  #           docker compose up -d --build --remove-orphans

  # publish-artifact:
  #   name: Publish build artifacts
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Upload backend jar
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: kanban-backend-jar
  #         path: kanban-backend/target/*.jar

  # cleanup:
  #   name: Cleanup resources
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Stop all services
  #       run: docker compose down

