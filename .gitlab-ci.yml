stages:
  - test
  - build
  - deploy

variables:
  DEPLOY_PATH: "/home/${DEPLOY_USER}/kanban-app"

backend-test:
  stage: test
  image: maven:3.8.8-jdk-11
  script:
    - if [ -d kanban-backend ]; then cd kanban-backend && mvn -B test; fi
  artifacts:
    expire_in: 1h
    paths:
      - kanban-backend/target/

frontend-test:
  stage: test
  image: node:18
  script:
    - if [ -f kanban-frontend/package.json ]; then cd kanban-frontend || cd kanban-frontend; npm ci; npm run test --if-present || true; npm run lint --if-present || true; fi
  artifacts:
    expire_in: 1h
    paths:
      - kanban-frontend/dist

backend-build:
  stage: build
  image: maven:3.8.8-jdk-11
  script:
    - cd kanban-backend
    - mvn -B clean package -DskipTests
  artifacts:
    expire_in: 1h
    paths:
      - kanban-backend/target/*.jar

frontend-build:
  stage: build
  image: node:18
  script:
    - cd kanban-frontend
    - npm ci
    - npm run build
  artifacts:
    expire_in: 1h
    paths:
      - kanban-frontend/dist

deploy:
  stage: deploy
  image: alpine:3.18
  before_script:
    - apk add --no-cache openssh-client rsync bash
    - mkdir -p ~/.ssh
    - echo "$DEPLOY_SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - printf "POSTGRES_DB=%s\nPOSTGRES_USER=%s\nPOSTGRES_PASSWORD=%s\n" "$POSTGRES_DB" "$POSTGRES_USER" "$POSTGRES_PASSWORD" > .env
    - rsync -avz --delete --exclude='.git' --exclude='node_modules' --exclude='target' ./ $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_PATH && docker compose pull || true && docker compose up -d --build --remove-orphans"
  only:
    - main
